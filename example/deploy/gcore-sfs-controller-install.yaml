apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: gcore-sfs-controller
    control-plane: controller-manager
  name: gcore-sfs-controller-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: gcore-sfs-controller-system/gcore-sfs-controller-serving-cert
    controller-gen.kubebuilder.io/version: v0.12.0
  name: nfsprovisioners.crd.gcore-sfs-controller.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: gcore-sfs-controller-webhook-service
          namespace: gcore-sfs-controller-system
          path: /convert
      conversionReviewVersions:
      - v1
  group: crd.gcore-sfs-controller.io
  names:
    kind: NfsProvisioner
    listKind: NfsProvisionerList
    plural: nfsprovisioners
    singular: nfsprovisioner
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: NfsProvisioner is the Schema for the nfsprovisioners API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NfsProvisionerSpec defines the desired state of NfsProvisioner
            properties:
              apiToken:
                description: APIToken is the API token used to authenticate with Gcore
                  Cloud.
                type: string
              apiURL:
                description: APIURL is the URL of the Gcore Cloud API.
                type: string
              chartName:
                description: Provisioner Helm chart name
                type: string
              chartVersion:
                description: Provisioner Helm chart version
                type: string
              helmRepository:
                description: Provisioner helm repository
                type: string
              imageVersion:
                description: Provisioner image version
                type: string
              paused:
                description: Paused can be used to prevent controllers from processing
                  the Provisioner and all its associated objects.
                type: boolean
              project:
                description: File share project ID
                type: integer
              region:
                description: File share region ID
                type: integer
            required:
            - apiToken
            - project
            - region
            type: object
          status:
            description: NfsProvisionerStatus defines the observed state of NfsProvisioner
            properties:
              provisionersReady:
                description: Ready denotes that all nfs file share provisioners has
                  been deployed and running
                type: boolean
            required:
            - provisionersReady
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-controller-manager
  namespace: gcore-sfs-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-leader-election-role
  namespace: gcore-sfs-controller-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gcore-sfs-controller-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  - persistentvolumeclaims
  - persistentvolumes
  - pods
  - secrets
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - patch
  - upate
- apiGroups:
  - crd.gcore-sfs-controller.io
  resources:
  - nfsprovisioners
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.gcore-sfs-controller.io
  resources:
  - nfsprovisioners/finalizers
  verbs:
  - update
- apiGroups:
  - crd.gcore-sfs-controller.io
  resources:
  - nfsprovisioners/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-leader-election-rolebinding
  namespace: gcore-sfs-controller-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gcore-sfs-controller-leader-election-role
subjects:
- kind: ServiceAccount
  name: gcore-sfs-controller-controller-manager
  namespace: gcore-sfs-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gcore-sfs-controller-manager-role
subjects:
- kind: ServiceAccount
  name: gcore-sfs-controller-controller-manager
  namespace: gcore-sfs-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gcore-sfs-controller-proxy-role
subjects:
- kind: ServiceAccount
  name: gcore-sfs-controller-controller-manager
  namespace: gcore-sfs-controller-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: gcore-sfs-controller
    control-plane: controller-manager
  name: gcore-sfs-controller-controller-manager-metrics-service
  namespace: gcore-sfs-controller-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-webhook-service
  namespace: gcore-sfs-controller-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: gcore-sfs-controller
    control-plane: controller-manager
  name: gcore-sfs-controller-controller-manager
  namespace: gcore-sfs-controller-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: registry.lux.cloud.gcorelabs.com/managed-k8s/gcore-sfs-controller:1.0.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 200m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: gcore-sfs-controller-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: serving-cert
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: certificate
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-serving-cert
  namespace: gcore-sfs-controller-system
spec:
  dnsNames:
  - gcore-sfs-controller-webhook-service.gcore-sfs-controller-system.svc
  - gcore-sfs-controller-webhook-service.gcore-sfs-controller-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: gcore-sfs-controller-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: gcore-sfs-controller
    app.kubernetes.io/instance: serving-cert
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: certificate
    app.kubernetes.io/part-of: gcore-sfs-controller
  name: gcore-sfs-controller-selfsigned-issuer
  namespace: gcore-sfs-controller-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: gcore-sfs-controller-system/gcore-sfs-controller-serving-cert
  name: gcore-sfs-controller-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: gcore-sfs-controller-webhook-service
      namespace: gcore-sfs-controller-system
      path: /mutate-crd-gcore-sfs-controller-io-v1-nfsprovisioner
  failurePolicy: Fail
  name: mnfsprovisioner.kb.io
  rules:
  - apiGroups:
    - crd.gcore-sfs-controller.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - nfsprovisioners
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: gcore-sfs-controller-system/gcore-sfs-controller-serving-cert
  name: gcore-sfs-controller-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: gcore-sfs-controller-webhook-service
      namespace: gcore-sfs-controller-system
      path: /validate-crd-gcore-sfs-controller-io-v1-nfsprovisioner
  failurePolicy: Fail
  name: vnfsprovisioner.kb.io
  rules:
  - apiGroups:
    - crd.gcore-sfs-controller.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - nfsprovisioners
  sideEffects: None
